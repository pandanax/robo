# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Auth {
  accessToken: String!
}

input AuthInput {
  email: String!
  password: String!
}

type Candle {
  close: Float!
  closeTime: String!
  high: Float!
  id: String!
  interval: String!
  low: Float!
  open: Float!
  openTime: String!
  symbol: String!
  volume: Float!
}

input CandleIndexInput {
  interval: String!
  symbol: String!
}

input CandleInput {
  dateFrom: String!
  dateTo: String!
  interval: String!
  symbol: String!
}

type Candles {
  items: [Candle!]!
}

type GqlExchangeFilter {
  filterType: String!
  maxNumAlgoOrders: Float
  maxNumOrders: Float
}

type GqlExchangeInfo {
  exchangeFilters: [GqlExchangeFilter!]!
  rateLimits: [GqlRateLimiter!]!
  serverTime: Float!
  symbols: [GqlSymbolExchangeInfo!]!
  timezone: String!
}

type GqlRateLimiter {
  interval: String!
  intervalNum: Float!
  limit: Float!
  rateLimitType: String!
}

type GqlSymbolExchangeInfo {
  baseAsset: String!
  baseAssetPrecision: Float!
  filters: String!
  icebergAllowed: Boolean!
  isMarginTradingAllowed: Boolean!
  isSpotTradingAllowed: Boolean!
  ocoAllowed: Boolean!
  orderTypes: [String!]!
  quoteAsset: String!
  quoteAssetPrecision: Float!
  status: String!
  symbol: String!
}

input JobIdInput {
  id: Float!
}

type Mutation {
  login(payload: AuthInput!): Auth!
  register(payload: RegisterUserInput!): User!
}

type Query {
  collectTickersData(payload: CandleInput!): UniversalCandleJobResponse!
  deleteBulkCandles(payload: CandleIndexInput!): UniversalResponse!
  getExchangeInfo: GqlExchangeInfo!
  getJobStatusCollectTickersData(payload: JobIdInput!): UniversalResponse!
  indexCandles(payload: CandleInput!): Candles!
  scheduleAllCandleJobs: UniversalResponse!
  searchCandles(payload: CandleInput!): Candles!
  updateCandleIndices: UniversalResponse!
  whoAmI: User!
}

input RegisterUserInput {
  email: String!
  firstName: String!
  lastName: String!
  password: String!
}

type SpotSymbolTicker {
  baseAssetVolume: Float!
  bestAskPrice: Float!
  bestAskQuantity: Float!
  bestBid: Float!
  bestBidQuantity: Float!
  closeQuantity: Float!
  closeTime: Float!
  currentClose: Float!
  eventTime: Float!
  eventType: String!
  firstTradeId: Float!
  high: Float!
  lastTradeId: Float!
  low: Float!
  open: Float!
  openTime: Float!
  previousClose: Float!
  priceChange: Float!
  priceChangePercent: Float!
  quoteAssetVolume: Float!
  symbol: String!
  trades: Float!
  weightedAveragePrice: Float!
  wsKey: String!
  wsMarket: String!
}

type Subscription {
  subscribeSpotSymbol24hrTicker: SpotSymbolTicker!
}

type UniversalCandleJobResponse {
  id: Float!
  name: String!
  timestamp: Float!
}

type UniversalResponse {
  message: String!
  status: String!
  statusCode: Float!
}

type User {
  _id: String!
  email: String!
  firstName: String!
  lastName: String!
  password: String!
}