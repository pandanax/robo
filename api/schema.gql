# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Auth {
  accessToken: String!
}

input AuthInput {
  email: String!
  password: String!
}

type Candle {
  close: Float!
  closeTime: Float!
  high: Float!
  interval: String!
  low: Float!
  open: Float!
  openTime: Float!
  symbol: String!
  volume: Float!
}

input CandleInput {
  dateFrom: String!
  dateTo: String!
  interval: String!
  symbol: String!
}

type Candles {
  items: [Candle!]!
}

type CollectTickersData {
  result: String!
}

input CreateHobbyInput {
  name: String!
}

input CreatePersonInput {
  hobbies: [String!]!
  name: String!
}

type GqlExchangeFilter {
  filterType: String!
  maxNumAlgoOrders: Float
  maxNumOrders: Float
}

type GqlExchangeInfo {
  exchangeFilters: [GqlExchangeFilter!]!
  rateLimits: [GqlRateLimiter!]!
  serverTime: Float!
  symbols: [GqlSymbolExchangeInfo!]!
  timezone: String!
}

type GqlRateLimiter {
  interval: String!
  intervalNum: Float!
  limit: Float!
  rateLimitType: String!
}

type GqlSymbolExchangeInfo {
  baseAsset: String!
  baseAssetPrecision: Float!
  filters: String!
  icebergAllowed: Boolean!
  isMarginTradingAllowed: Boolean!
  isSpotTradingAllowed: Boolean!
  ocoAllowed: Boolean!
  orderTypes: [String!]!
  quoteAsset: String!
  quoteAssetPrecision: Float!
  status: String!
  symbol: String!
}

type Hobby {
  _id: String!
  name: String!
}

input ListHobbyInput {
  _id: String
  name: String
}

input ListPersonInput {
  _id: String
  hobbies: [String!]
  name: String
}

type Mutation {
  createHobby(payload: CreateHobbyInput!): Hobby!
  createPerson(payload: CreatePersonInput!): Person!
  deleteHobby(_id: String!): Hobby!
  deletePerson(_id: String!): Person!
  login(payload: AuthInput!): Auth!
  register(payload: RegisterUserInput!): User!
  updateHobby(payload: UpdateHobbyInput!): Hobby!
  updatePerson(payload: UpdatePersonInput!): Person!
}

type Person {
  _id: String!
  hobbies(populate: Boolean!): [Hobby!]!
  name: String!
}

type Query {
  getCandles(payload: CandleInput!): Candles!
  getExchangeInfo: GqlExchangeInfo!
  hobbies(filters: ListHobbyInput): [Hobby!]!
  hobby(_id: String!): Hobby!
  person(_id: String!): Person!
  persons(filters: ListPersonInput): [Person!]!
  whoAmI: User!
}

input RegisterUserInput {
  email: String!
  firstName: String!
  lastName: String!
  password: String!
}

type SpotSymbolTicker {
  baseAssetVolume: Float!
  bestAskPrice: Float!
  bestAskQuantity: Float!
  bestBid: Float!
  bestBidQuantity: Float!
  closeQuantity: Float!
  closeTime: Float!
  currentClose: Float!
  eventTime: Float!
  eventType: String!
  firstTradeId: Float!
  high: Float!
  lastTradeId: Float!
  low: Float!
  open: Float!
  openTime: Float!
  previousClose: Float!
  priceChange: Float!
  priceChangePercent: Float!
  quoteAssetVolume: Float!
  symbol: String!
  trades: Float!
  weightedAveragePrice: Float!
  wsKey: String!
  wsMarket: String!
}

type Subscription {
  subscribeCollectTickersData(payload: CandleInput!): CollectTickersData!
  subscribeSpotSymbol24hrTicker: SpotSymbolTicker!
}

input UpdateHobbyInput {
  _id: String!
  name: String
}

input UpdatePersonInput {
  _id: String!
  hobbies: [String!]
  name: String
}

type User {
  _id: String!
  email: String!
  firstName: String!
  lastName: String!
  password: String!
}